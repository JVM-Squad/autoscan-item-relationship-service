@startuml
skinparam monochrome true
skinparam shadowing false
skinparam defaultFontName "Architects daughter"

autonumber "<b>[000]"

actor "Client App (Script)" as Client

box "OEM" #LightGrey
    participant IRS as IRS
    participant SubmodelServer as SubmodelServer
    participant dDTR as dDTR
    participant EDC as EDC #99FF99
end box

participant EDC as EDCTier1

box "Tier 1"
     participant IRS as IRSTier1
     participant SubmodelServer as SubmodelServerTier1
     participant dDTR as dDTRTier1
     participant EDC as EDCConsumerTier1 #99FF99
end box

box SharedServices
    participant DiscoveryFinder as DiscoveryFinder
    participant EDCDiscoveryService as EDCDiscoveryService
end box

Client -> IRS :  GET /irs/proxy/registry/lookup/shells{bpn} {bpnl="BPNL0123456789XX"}

ref over IRS, DiscoveryFinder, EDCDiscoveryService, EDC, dDTR
    lookup/shells for given BPN
    :return array of {aasIdentifier}
end
Client <-- IRS :return array of aasIdentifier

loop array of aasIdentifier
    Client -> IRS :  GET /irs/proxy/registry/shell-descriptors/{aasIdentifier}
    ref over IRS, DiscoveryFinder, EDCDiscoveryService, EDC, dDTR
        registry/shell-descriptors/{aasIdentifier} for given BPN
        :add {aasIdentifier} to collection
    end
    IRS -> IRS : :return array of {aasIdentifier}
end loop

Client <-- IRS : return array of {aasIdentifier}

Client -> Client : filter aas for **SubmodelDescriptor**  (asPlanned)

opt aas is asPlanned
    note left
        semanticId/
        ["type"="ExternalReference"]/
        keys["type"="GlobalReference"]/
        ["value".contains("SingleLevelBomAsPlanned")]
        SingleLevelBomAsPlanned (only downwards)
    end note
    Client -> Client : add aas to aasResultSet
    note left
        Requesting all twins for a given "bomLifecycle"
    end note

end opt

Client <-- Client : aasResultSet

Client -> IRS : POST /ess/bpn/investigations
note left
    {
      "bomLifecycle": "asPlanned",
      "callbackUrl": "https://hostname.com/callback?jobId={jobId}",
      "incidentBpns": [],
      "key": {"bpn", "globalAssetId"}
    }
end note
IRS -> IRS : register an IRS ess incident job

ref over IRS, DiscoveryFinder, EDCDiscoveryService, EDC, dDTR
    lookup/shells for given globalAssetId
    :return aasIdentifier
    /registry/shell-descriptors/{aasIdentifier}
    :return AAS for aasIdentifier
end
IRS -> SubmodelServer : GET SingleLevelBomAsPlanned
IRS <-- SubmodelServer : Receiver SingleLevelBomAsPlanned
IRS --> IRS : Extract childCXIds from SingleLevelBomAsPlanned

loop  childCXIds

ref over IRS, DiscoveryFinder, EDCDiscoveryService
    get EDC endpoint for Tier1
end
ref over IRS, EDCTier1, dDTRTier1
    lookup/shells for given globalAssetId
    :return AAS for globalAssetId
end
IRS -> SubmodelServer : Get PartAsPlanned
IRS <-- SubmodelServer : Receive PartAsPlanned
IRS -> IRS: Validity Check on PartAsPlanned validityPeriod

opt validFrom >= Timstamp.UTC.now <= validTo
    IRS -> SubmodelServer : GET PartSiteInformationAsPlanned
    IRS -> IRS : Extract **catenaXsiteId** from PartSiteInformationAsPlanned

    alt "incidentBpns".contains(catenaXsiteId)
        Client <-- IRS: Respond part-chain infected
        note right
            {
                "header": {
                    "notificationId": "e0f8...",
                    "senderBpn": "BPNL0..S",
                    "recipientBpn": "BPNL..H",
                    ...
                },
                "content": {
                    "result" : "yes"
                }
            }
        end note
    else
        ref over IRS, IRSTier1
            : Send ess-request notification
        end ref
        IRS <-- IRSTier1: Return  ess-response notification
        IRS --> IRS : Aggregates
    end
else
    IRS -> IRS: continue loop
end
end loop

@enduml
