item-relationship-service:
  #####################
  # IRS Configuration #
  #####################
  irsUrl: "https://irs.int.demo.catena-x.net"
  bpn: <path:traceability-irs/data/int/irs#bpn>
  apiKeyAdmin: <path:traceability-irs/data/int/irs#apiKeyAdmin>
  apiKeyRegular: <path:traceability-irs/data/int/irs#apiKeyRegular>
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: "irs.int.demo.catena-x.net"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - "irs.int.demo.catena-x.net"
        secretName: tls-secret
  digitalTwinRegistry:
    url: https://semantics.int.demo.catena-x.net/registry
    shellDescriptorTemplate: /shell-descriptors/{aasIdentifier}
    lookupShellsTemplate: /lookup/shells?assetIds={assetIds}
  discovery:
    discoveryFinderUrl: https://semantics.int.demo.catena-x.net/discoveryfinder/api/v1.0/administration/connectors/discovery/search
  semanticshub:
    url: https://semantics.int.demo.catena-x.net/hub/api/v1/models
    pageSize: "200"
  bpdm:
    url: https://partners-pool.int.demo.catena-x.net
  minioUser: <path:traceability-irs/data/int/minio#minioUser>
  minioPassword: <path:traceability-irs/data/int/minio#minioPassword>
  oauth2:
    clientTokenUri: <path:traceability-irs/data/int/oauth2#tokenUri>
    semantics:
      clientId: <path:traceability-irs/data/oauth2/semantics#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/semantics#clientSecret>
    discovery:
      clientId: <path:traceability-irs/data/oauth2/discovery#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/discovery#clientSecret>
    bpdm:
      clientId: <path:traceability-irs/data/oauth2/bpdm#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/bpdm#clientSecret>
  edc:
    submodel:
      request:
        ttl: PT2M
    controlplane:
      request:
        ttl: PT2M
      apikey:
        secret: <path:traceability-irs/data/int/controlplane#apiKey>

  resources:
    limits:
      cpu: 1.5
      memory: 1.5Gi
    requests:
      cpu: 200m
      memory: 1.5Gi


  #######################
  # Minio Configuration #
  #######################
  minio:
    rootUser: <path:traceability-irs/data/int/minio#minioUser>
    rootPassword: <path:traceability-irs/data/int/minio#minioPassword>
    serviceAccount:
      name: "irs-int-minio-sa"

  #########################
  # Grafana Configuration #
  #########################
  grafana:
    resources:
      requests:
        cpu: 50m
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 256Mi
    enabled: true
    ingress:
      enabled: true
      hosts:
        - "irs-grafana.int.demo.catena-x.net"
      tls:
        - hosts:
            - "irs-grafana.int.demo.catena-x.net"
          secretName: tls-secret

    user: <path:traceability-irs/data/int/grafana#username>
    password: <path:traceability-irs/data/int/grafana#password>

  ############################
  # Prometheus Configuration #
  ############################
  prometheus:
    enabled: true


tractusx-connector:
  install:
    postgresql: false
    vault: false
  participant:
    id: <path:traceability-irs/data/int/controlplane#participantId>

  iatp:
    id: <path:traceability-irs/data/int/controlplane#DID>
    # -- Configures the trusted issuers for this runtime
    # ATTENTION: NOT YET WORKING FOR 0.7.0 chart
    trustedIssuers:
      - <path:traceability-irs/data/int/controlplane#trustedIssuer>
    sts:
      dim:
        url: <path:traceability-irs/data/int/controlplane#dimUrl>
      oauth:
        token_url: <path:traceability-irs/data/int/controlplane#iatp.oauth.tokenurl>
        client:
          id: <path:traceability-irs/data/int/controlplane#dimClientId>
          secret_alias: dim-secret-int
  controlplane:
    ingresses:
      - enabled: true
        hostname: "irs-consumer-controlplane.int.demo.catena-x.net"
        annotations:
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - protocol
          - management
        tls:
          enabled: true
          secretName: tls-secret

    bdrs:
      # time that a cached BPN/DID resolution map is valid in seconds, default is 10 min
      cache_validity_seconds: 600
      server:
        # URL of the BPN/DID Resolution Service - required:
        url: <path:traceability-irs/data/int/controlplane#bdrsUrl>

    endpoints:
      management:
        authKey: <path:traceability-irs/data/int/controlplane#apiKey>  # -- authentication key, must be attached to each 'X-Api-Key' request header

    resources:
      limits:
        cpu: 1.5
        memory: 3Gi
      requests:
        cpu: 250m
        memory: 3Gi

  dataplane:
    ingresses:
      - enabled: true
        hostname: "irs-consumer-dataplane.int.demo.catena-x.net"
        annotations:
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - public
        className: "nginx"
        tls:
          enabled: true
          secretName: tls-secret

    token:
      signer:
        # alias under which the private key is stored in the vault (JWK or PEM format)
        privatekey_alias: irs-int-daps-key
      verifier:
        # alias under which the public key is stored in the vault, that belongs to the private key ("privatekey_alias", JWK or PEM format)
        publickey_alias: irs-int-daps-cert

    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 512Mi

  ################################
  # EDC Vault/DAPS Configuration #
  ################################
  vault:
    hashicorp:
      url: "https://vault.demo.catena-x.net"
      token: "<path:traceability-irs/data/int/controlplane#vaultToken>"
      timeout: 30
      healthCheck:
        enabled: true
        standbyOk: true
      paths:
        secret: /v1/traceability-irs
        health: /v1/sys/health
    secretNames:
      transferProxyTokenSignerPrivateKey: irs-int-daps-key
      transferProxyTokenSignerPublicKey: irs-int-daps-cert
      transferProxyTokenEncryptionAesKey: test-edc-encryption-key

  ##################################
  # EDC Postgres Configuration #
  ##################################
  postgresql:
    enabled: true
    auth:
      username: <path:traceability-irs/data/int/controlplane#databaseuser>
      password: <path:traceability-irs/data/int/controlplane#databasepassword>
    username: <path:traceability-irs/data/int/controlplane#databaseuser>
    password: <path:traceability-irs/data/int/controlplane#databasepassword>
    jdbcUrl: "jdbc:postgresql://irs-int-edc-consumer-postgresql:5432/edc"

##############################
# EDC Postgres Configuration #
##############################
# EDC chart do not support multiple postgres instances in the same namespace at the moment.
# Enable this to use the postgres dependency for when you want to deploy multiple EDC instances in one namespace
postgresql:
  enabled: true
edc-postgresql:
  nameOverride: irs-int-edc-consumer-postgresql
  fullnameOverride: irs-int-edc-consumer-postgresql
  auth:
    database: edc
    username: <path:traceability-irs/data/int/controlplane#databaseuser>
    postgresPassword: <path:traceability-irs/data/int/controlplane#databasepassword>
    password: <path:traceability-irs/data/int/controlplane#databasepassword>
