name: Deploy to ArgoCD

on:
  workflow_dispatch: # Trigger manually
    input:
      environment:
        type: choice
        options:
          - 'dev'
          - 'int'

jobs:
  redeploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set environment
        run: |
          echo "ARGOCD_ENV=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_ENV

      - name: Set secrets for DEV
        if: github.event.inputs.environment == null || github.event.inputs.environment == 'dev'
        run: |
          echo "ARGOCD_TOKEN=${{ secrets.ARGOCD_TOKEN_DEV }}" >> $GITHUB_ENV

      - name: Set secrets for INT
        if: github.event.inputs.environment == 'int'
        run: echo "ARGOCD_TOKEN=${{ secrets.ARGOCD_TOKEN_INT }}" >> $GITHUB_ENV

      - name: Deploy new app
        run: >
          curl
          --request POST 
          -H "Content-Type: application/json"
          -H "Authorization: Bearer ${{ env.ARGOCD_TOKEN }}"
          --url "https://argo.${{ env.ARGOCD_ENV }}.demo.catena-x.net/api/v1/applications?upsert=true"
          --data-binary "@charts/irs-environments/${{ env.ARGOCD_ENV }}/argo-app.json"
          -sSf
          

      - name: Poll for successful deployment
        run: |
          interval_in_seconds=5
          build_url=https://argo.${{ env.ARGOCD_ENV }}.demo.catena-x.net/api/v1/applications/irs-${{ env.ARGOCD_ENV }}
          status_path=".status.health.status"
          NEXT_WAIT_TIME=0
          sleep $interval_in_seconds;

          printf "\nPolling '${build_url%\?*}' every $interval_in_seconds seconds, until 'Healthy'\n"
          until [ $NEXT_WAIT_TIME -eq 20 ];
          do
            status=$(curl $build_url -H "Authorization: Bearer ${{ env.ARGOCD_TOKEN }}" -s | jq $status_path);
            printf "\r$(date +%H:%M:%S): $status";
            if [[ "$status" == "\"Healthy\"" || "$status" == "\"Degraded\"" ]]; then
              if [[ "$status" == "\"Degraded\"" ]]; then
                printf "\nDeployment failed!\n"
                exit 1
              else
                printf "\nDeployment successful!\n";
              fi
              break;
            fi;
            NEXT_WAIT_TIME=$((NEXT_WAIT_TIME+1));
            sleep $interval_in_seconds;
          done
          [ $NEXT_WAIT_TIME -lt 20 ]
